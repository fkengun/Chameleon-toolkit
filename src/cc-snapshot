#!/bin/bash

red=`tput setaf 1`
green=`tput setaf 2`
cyan=`tput setaf 6`
reset=`tput sgr0`

export LIBGUESTFS_BACKEND=direct
username=`whoami`
if [ $username != "root" ]
then
  echo "Please run this script as root user"
  exit
fi

#: ${OS_PASSWORD?"Need to set OS_PASSWORD"}

set -eu
set -o pipefail

HOSTNAME=$(hostname)
UUID=$(uuidgen)

IS_UBUNTU=$(UNAME_OUTPUT=$(uname -a | tr '[:upper:]' '[:lower:]' | grep ubuntu); if [ "$UNAME_OUTPUT" != "" ]; then echo "true"; else echo "false"; fi)
if [ -z ${var+x} ]; then
    UBUNTU_VERSION=$(lsb_release -c | awk '{print $2}')
else
    UBUNTU_VERSION=""
fi
IS_CENTOS=$(if [ -f /etc/redhat-release ]; then echo "true"; else echo "false"; fi)

#########################################################
# Generate openrc file that will be used to upload image
#########################################################

# The extract_json_key function is in charge of find a key in a flat JSON value.
# Please note that if the JSON value is not flat, it should return the first value
# associated to the given key.
#    $1: String that represents the key
#    $2: String that represents the JSON value
#    return: the value of the key in the JSON value
# example: extract_json_key 'foo' '{"foo": 1, "bar": 2}'

function extract_json_key {
    RESULT=$(echo "$2" | sed "s/.*$1\": \"//g" | sed 's/".*//g')
    echo "$RESULT"
}

JSON_VENDOR_DATA=$(curl -s http://169.254.169.254/openstack/latest/vendor_data.json)
SITE=$(extract_json_key "site" "$JSON_VENDOR_DATA")

if [ "$SITE" != "tacc" ] && [ "$SITE" != "uc" ]; then
    # The current instance  is apparently not a baremetal node.
    echo "ERROR: Could not understand which site you are using, please  be sure that you run the script inside a baremetal instance!"
    exit 1
fi

PROJECT_ID=$(extract_json_key "project_id" "$JSON_VENDOR_DATA")

cat > /tmp/openrc <<- EOM
#!/bin/bash

# To use an OpenStack cloud you need to authenticate against the Identity
# service named keystone, which returns a **Token** and **Service Catalog**.
# The catalog contains the endpoints for all services the user/tenant has
# access to - such as Compute, Image Service, Identity, Object Storage, Block
# Storage, and Networking (code-named nova, glance, keystone, swift,
# cinder, and neutron).
#
# *NOTE*: Using the 2.0 *Identity API* does not necessarily mean any other
# OpenStack API is version 2.0. For example, your cloud provider may implement
# Image API v1.1, Block Storage API v2, and Compute API v2.0. OS_AUTH_URL is
# only for the Identity API served through keystone.
export OS_AUTH_URL=https://chi.$SITE.chameleoncloud.org:5000/v2.0

# With the addition of Keystone we have standardized on the term **tenant**
# as the entity that owns the resources.
export OS_TENANT_ID=$PROJECT_ID

# In addition to the owning entity (tenant), OpenStack stores the entity
# performing the action as the **user**.
echo "Please enter your Chameleon username: "
read -r OS_USERNAME_INPUT
export OS_USERNAME=\$OS_USERNAME_INPUT

# With Keystone you pass the keystone password.
echo "Please enter your Chameleon password: "
read -sr OS_PASSWORD_INPUT
export OS_PASSWORD=\$OS_PASSWORD_INPUT

# If your configuration has multiple regions, we set that information here.
# OS_REGION_NAME is optional and only valid in certain environments.
export OS_REGION_NAME="regionOne"
# Don't leave a blank variable, unset it if it was empty
if [ -z "\$OS_REGION_NAME" ]; then unset OS_REGION_NAME; fi
EOM

# set +x

# Source the file that has been generated above
source /tmp/openrc

date=`date +20%y%m%d`
if [ $# -eq 0 ]; then
    SNAPSHOT_NAME="${OS_USERNAME}-snapshot-${date}"
else
    SNAPSHOT_NAME="$1"
fi

echo "Will snapshot the instance using the following name: '$SNAPSHOT_NAME'"

# set -x

#################################
# Begin the snapshotting process
#################################

echo "${green}Installing prerequisite ...${reset}"
if [ "$IS_CENTOS" == true ]; then
    # Install prerequisite software (only required for XFS file systems, which is the default on CentOS 7):
    yum install -y libguestfs-xfs
fi

# Create a tar file of the contents of your instance:
if [ "$UBUNTU_VERSION"=="xenial" ]; then
   TAR_ARGS=""
else
   TAR_ARGS="--xattrs"
fi

echo "${green}[1/7] Removing previous snapshots ...${reset}"
rm -rf /tmp/snapshot*
/home/cc/fm.sh

# The following code is inspired from http://unix.stackexchange.com/questions/82598
echo "${green}[2/7] Creating tar file ...${reset}"
n=0
until [ $n -ge 5 ]
do
   tar cf /tmp/snapshot.tar / --selinux --acls $TAR_ARGS --numeric-owner --one-file-system  --exclude=/tmp/snapshot.tar --exclude=/tmp/* --exclude=/proc/* --exclude=/var/tmp/* --exclude=/boot/extlinux && break
   n=$[$n+1]
   sleep 15
done
/home/cc/fm.sh

if [ "$UBUNTU_VERSION" == "xenial" ]; then
   apt-get install -y libguestfs-tools
fi

if [ "$IS_UBUNTU" == true ]; then
    # Update guestfs appliances (prevent an error with virt-make-fs);
    # BUG: one package cannot be found (kpartx) and cause update-guestfs-appliance
    #      to exit with an error code;
    apt-get -y update # APT repos may need an update in order to find kpartx
    apt-get install -y kpartx
    if [ "$(which update-guestfs-appliance)" != "" ]; then
        update-guestfs-appliance || true
    fi
fi

if [ "$IS_CENTOS" == true ]; then
    FS="xfs"
    LABEL="img-rootfs"
fi

if [ "$IS_UBUNTU" == true ]; then
    FS="ext4"
    LABEL=`ls /dev/disk/by-label`
fi

# This will take 3 to 5 minutes. Next, convert the tar file into a qcow2 image (if you don't want to use the XFS file system, you can replace xfs by ext4):
echo "${green}[3/7] Converting tar file to qcow2 image ...${reset}"
virt-make-fs --partition --format=qcow2 --type=$FS --label=$LABEL /tmp/snapshot.tar /tmp/snapshot.qcow2
/home/cc/fm.sh

echo "${green}[4/7]Ensure GRUB is present ...${reset}"
if [ "$IS_CENTOS" == true ]; then
    # and looking at the name of the file in that directory. Next ensure that the GRUB bootloader is present in the image:
    virt-customize -a /tmp/snapshot.qcow2 --run-command 'grub2-install /dev/sda && grub2-mkconfig -o /boot/grub2/grub.cfg'
fi

if [ "$IS_UBUNTU" == true ]; then
    # Next ensure that the GRUB bootloader is present in the image:
    guestfish -a /tmp/snapshot.qcow2 -i sh 'grub-install /dev/sda && grub-mkconfig -o /boot/grub/grub.cfg'
fi
/home/cc/fm.sh

# To remove unwanted configuration information from your image, run:
echo "${green}[5/7] Removing unwanted configuration information from image ...${reset}"
virt-sysprep -a /tmp/snapshot.qcow2
/home/cc/fm.sh

# To complete the preparation of your snapshot image, create a compressed version of it:
echo "${green}[6/7] Compressing image ...${reset}"
qemu-img convert /tmp/snapshot.qcow2 -O qcow2 /tmp/snapshot_compressed.qcow2 -c
/home/cc/fm.sh

################################
# Upload the Snapshot on Glance
################################

# The final steps are to upload your snapshot image to OpenStack Glance.
echo "${green}[7/7] Uploading image ...${reset}"
glance image-create --progress --name $SNAPSHOT_NAME --disk-format qcow2 --container-format bare < /tmp/snapshot_compressed.qcow2

exit 0

