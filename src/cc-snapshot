#!/bin/bash

red=`tput setaf 1`
green=`tput setaf 2`
cyan=`tput setaf 6`
reset=`tput sgr0`

export LIBGUESTFS_BACKEND=direct

set -eu
set -o pipefail

if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root"
   exit 1
fi

PARTITION_IMAGE=false

print_usage() {
  echo "usage: $0 [-p] [-e folder_to_exclude] snapshot_name"
  echo "Optional arguments:"
  echo ""
  echo "  -h        Print this help message"
  echo "  -p        Create a partition image (separate kernel and ramdisk, no MBR)"
  echo "  -e        Exclude folder while snapshotting (can be used multiple times to exclude multiple folders)"
  echo ""
  echo " cc-snapshot version 0.2.0"
}

while getopts ":hp:e:" opt; do
  case $opt in
    h)
      print_usage
      exit 0
      ;;
    p)
      PARTITION_IMAGE=true
      ;;
    e)
      EXCLUDE_FOLDERS+=("$OPTARG")
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      print_usage
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

HOSTNAME=$(hostname)
UUID=$(uuidgen)

EXCLUDE_STRING=''
if [ -n "${EXCLUDE_FOLDERS+x}" ]; then
    for folder in "${EXCLUDE_FOLDERS[@]}"; do
        echo "Will exclude folder: $folder"
        EXCLUDE_STRING+="--exclude $folder "
    done
fi

DISTRO=$(gawk -F= '/^NAME/{print $2}' /etc/os-release | tr -d \"\' | tr ' ' '-')
UBUNTU='Ubuntu'
CENTOS='CentOS-Linux'

UBUNTU_VERSION=''
if [ $DISTRO = $UBUNTU ]; then
  UBUNTU_VERSION=$(lsb_release -c | awk '{print $2}')
fi

# Configure env for glance to upload image
JSON_VENDOR_DATA=$(curl -s http://169.254.169.254/openstack/latest/vendor_data.json)
if hash jq 2>/dev/null; then
  SITE=$(echo $JSON_VENDOR_DATA | jq -r .site)
  REGION=$(echo $JSON_VENDOR_DATA | jq -r .region)
  PROJECT_ID=$(echo $JSON_VENDOR_DATA | jq -r .project_id)
else
  # jq not available in default xenial repos
  function extract_json_key {
    RESULT=$(echo "$2" | sed "s/.*$1\": \"//g" | sed 's/".*//g')
    echo "$RESULT"
  }
  SITE=$(extract_json_key "site" "$JSON_VENDOR_DATA")
  REGION=$(extract_json_key "region" "$JSON_VENDOR_DATA")
  PROJECT_ID=$(extract_json_key "project_id" "$JSON_VENDOR_DATA")
fi

if [ "$SITE" != "tacc" ] && [ "$SITE" != "uc" ]; then
  # The current instance is apparently not a baremetal node.
  >&2 echo "Error: Could not detect which site you are using (got \"$SITE\")."
  >&2 echo "cc-snapshot is only supported for baremetal instances."
  exit 1
fi

export OS_REGION_NAME=$REGION
if [ -z "$OS_REGION_NAME" ]; then unset OS_REGION_NAME; fi

# if [ $KEYSTONE_VERSION = '2' ]; then
export OS_AUTH_URL=https://chi.$SITE.chameleoncloud.org:5000/v2.0
export OS_TENANT_ID=$PROJECT_ID
# else #keystone v3 ...migrate to this at some point
#export OS_AUTH_URL=https://chi.$SITE.chameleoncloud.org:5000/v3
#export OS_PROJECT_ID=$PROJECT_ID
#export OS_USER_DOMAIN_NAME="Default"
# fi

if [ -z "${OS_USERNAME+x}" ]; then
  echo "Please enter your Chameleon username: "
  read -r OS_USERNAME_INPUT
  export OS_USERNAME=$OS_USERNAME_INPUT
fi

if [ -z "${OS_PASSWORD+x}" ]; then
  echo "Please enter your Chameleon password: "
  read -sr OS_PASSWORD_INPUT
  export OS_PASSWORD=$OS_PASSWORD_INPUT
fi

set +e
glance image-list >/dev/null #2>&1
if [ ! $? -eq 0 ]; then
  echo Unable to contact Glance, check username and password
  exit 1
fi
set -e

date=`date +20%y%m%d`
if [ $# -eq 0 ]; then
  SNAPSHOT_NAME="${OS_USERNAME}-snapshot-${date}"
else
  SNAPSHOT_NAME="$1"
fi

echo "Will snapshot the instance using the following name: '$SNAPSHOT_NAME'"

#################################
# Begin the snapshotting process
#################################

echo "${green}Installing prerequisite ...${reset}"
if [ $DISTRO = $CENTOS ]; then
  # Install prerequisite software (only required for XFS file systems, which is the default on CentOS 7):
  yum install -y libguestfs-xfs
  yum update -y lvm2 # must be at least 2.02-171 to avoid bug https://bugzilla.redhat.com/show_bug.cgi?id=1475018
fi

# Create a tar file of the contents of your instance:
if [ "$UBUNTU_VERSION"=="xenial" ]; then
  TAR_ARGS=""
else
  TAR_ARGS="--xattrs"
fi

echo "${green}[1/7] Removing previous snapshots ...${reset}"
rm -rf /tmp/snapshot*
/home/cc/fm.sh

# The following code is inspired from http://unix.stackexchange.com/questions/82598
echo "${green}[2/7] Creating tar file ...${reset}"
n=0
until [ $n -ge 5 ]
do
  tar cf /tmp/snapshot.tar / --selinux --acls $TAR_ARGS --numeric-owner --one-file-system  \
    --exclude=/tmp/snapshot.tar \
    --exclude=/tmp/* \
    --exclude=/proc/* \
    --exclude=/var/tmp/* \
    --exclude=/boot/extlinux \
    --exclude=/var/lib/cloud \
    $EXCLUDE_STRING && break
  n=$[$n+1]
  sleep 15
done
/home/cc/fm.sh

if [ $DISTRO = $UBUNTU ]; then
  if [ $UBUNTU_VERSION = "xenial" ]; then
    apt-get install -yq libguestfs-tools
  fi

  # Update guestfs appliances (prevent an error with virt-make-fs);
  # BUG: one package cannot be found (kpartx) and cause update-guestfs-appliance
  #      to exit with an error code;
  apt-get -yq update # APT repos may need an update in order to find kpartx
  apt-get install -yq kpartx
  if [ "$(which update-guestfs-appliance)" != "" ]; then
    update-guestfs-appliance || true
  fi

  FS="ext4"
  LABEL=`ls /dev/disk/by-label`
fi

if [ $DISTRO = $CENTOS ]; then
  FS="xfs"
  LABEL="img-rootfs"
fi

ARCH=`uname -i`
if [ "$ARCH" == "aarch64" ]; then
  # The libguestfs appliance is not compatible with uboot kernels.
  # We assume that there is a kernel available at /boot/vmlinuz-libguestfs
  export SUPERMIN_KERNEL=/boot/vmlinuz-libguestfs
  export SUPERMIN_KERNEL_VERSION=`readlink /boot/vmlinuz | sed 's/vmlinuz-\(.*\)/\1/'`
fi

# Confusingly, virt-make-fs uses the --partition flag to request adding an MBR
# to the image, while what we (and Ironic) call partition images are images
# without MBR, hence the inverted logic with the PARTITION_IMAGE variable.
if [ "$PARTITION_IMAGE" == false ]; then
  VIRT_MAKE_FS="virt-make-fs --partition"
else
  VIRT_MAKE_FS="virt-make-fs"
fi

# This will take 3 to 5 minutes. Next, convert the tar file into a qcow2 image
# (if you don't want to use the XFS file system, you can replace xfs by ext4):
echo "${green}[3/7] Converting tar file to qcow2 image ...${reset}"
$VIRT_MAKE_FS --format=qcow2 --type=$FS --label=$LABEL /tmp/snapshot.tar /tmp/snapshot.qcow2
/home/cc/fm.sh

echo "${green}[4/7]Ensure GRUB is present ...${reset}"
if [ "$PARTITION_IMAGE" == false ]; then
  if [ $DISTRO = $CENTOS ]; then
    # and looking at the name of the file in that directory. Next ensure that the GRUB bootloader is present in the image:
    virt-customize -a /tmp/snapshot.qcow2 --run-command 'grub2-install /dev/sda && grub2-mkconfig -o /boot/grub2/grub.cfg'
  fi

  if [ $DISTRO = $UBUNTU ]; then
    # Next ensure that the GRUB bootloader is present in the image:
    guestfish -a /tmp/snapshot.qcow2 -i sh 'grub-install /dev/sda && grub-mkconfig -o /boot/grub/grub.cfg'
  fi
fi
/home/cc/fm.sh

# To remove unwanted configuration information from your image, run:
echo "${green}[5/7] Removing unwanted configuration information from image ...${reset}"
virt-sysprep -a /tmp/snapshot.qcow2
/home/cc/fm.sh

# To complete the preparation of your snapshot image, create a compressed version of it:
echo "${green}[6/7] Compressing image ...${reset}"
qemu-img convert /tmp/snapshot.qcow2 -O qcow2 /tmp/snapshot_compressed.qcow2 -c
/home/cc/fm.sh

################################
# Upload the Snapshot on Glance
################################

# The final steps are to upload your snapshot image to OpenStack Glance.
echo "${green}[7/7] Uploading image ...${reset}"
if [ "$PARTITION_IMAGE" == false ]; then
  glance image-create --progress --name $SNAPSHOT_NAME --disk-format qcow2 --container-format bare < /tmp/snapshot_compressed.qcow2
else
  echo "You asked for a partition image."
  echo "You will need to upload your kernel and ramdisk to Glance before uploading your image."
  echo "You may want to run 'source /tmp/openrc' to set your OpenStack credentials."
  echo "After kernel and ramdisk are uploaded, run the below, filling in IMAGE_..._UUID:"
  echo
  echo "glance image-create \\"
  echo "  --name $SNAPSHOT_NAME \\"
  echo "  --disk-format qcow2 \\"
  echo "  --container-format bare \\"
  echo "  --property kernel_id=IMAGE_VMLINUZ_UUID \\"
  echo "  --property ramdisk_id=IMAGE_INITRD_UUID \\"
  echo "  < /tmp/snapshot_compressed.qcow2"
fi

exit 0
