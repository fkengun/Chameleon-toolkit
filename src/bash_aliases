# .bash_aliases

sync_folder() {
  if [[ $# == 0 ]]
  then
    echo "Usage: sync_folder [-q|--quiet] path"
    return
  fi

  nodes=`cat ~/nodes | awk '{print $1}'`
  my_ip=`hostname`
  QUIET=NO
  while [[ $# > 0 ]]
  do
    key="$1"

    case $key in
      -q|--quiet)
        QUIET=YES
        ;;
      -h|--help)
        echo "Usage: sync_folder [-q|--quiet] path"
        return # past argument
        ;;
      --default)
        DEFAULT=YES
        ;;
      *)
        path=$key # paths
        ;;
    esac
    shift # past argument or value
  done
  local_path=`realpath "$path"`
  remote_path=`dirname "$local_path"`

  if [ $QUIET == YES ]
  then
    ssh_options="-q"
    rsync_options="-razq"
  else
    ssh_options=""
    rsync_options="-razv"
  fi

  for node in $nodes
  do
    if [ $node == $my_ip ]
    then
      continue
    fi

    ssh $ssh_options $node "mkdir -p $remote_path"
    rsync $rsync_options $local_path $node:$remote_path
  done
}
sync_file() {
  if [[ $# == 0 ]]
  then
    echo "Usage: sync_file [-q|--quiet] file"
    return
  fi

  file_count=0
  file_list=
  nodes=`cat ~/nodes | awk '{print $1}'`
  my_ip=`hostname`
  QUIET=NO
  while [[ $# > 0 ]]
  do
    key="$1"

    case $key in
      -q|--quiet)
        QUIET=YES
        ;;
      -h|--help)
        echo "Usage: sync_file [-q|--quiet] file"
        return # past argument
        ;;
      --default)
        DEFAULT=YES
        ;;
      *)
        file_list[$file_count]=$key # files
        ((file_count=file_count+1)) # add expanded files to list
        ;;
    esac
    shift # past argument or value
  done
  #echo files from input ${file_list[@]}
  count=0
  for file in ${file_list[@]}
  do
    path_list[$count]=`realpath $file`
    ((count=count+1))
  done
  #echo files after realpath ${path_list[@]}

  if [ $QUIET == YES ]
  then
    options="-razq"
  else
    options="-razv"
  fi

  for node in $nodes
  do
    if [ $node == $my_ip ]
    then
      continue
    fi

    for path in ${path_list[@]}
    do
      rsync $options $path $node:$path &
    done
  done
  wait
}

collect() {
  if [[ $# == 0 ]]
  then
    echo "Usage: collect [-q|--quiet] file [{-t|--target} target_path]"
    return
  fi

  nodes=`cat ~/nodes | awk '{print $1}'`
  quiet=NO
  target_path=.
  while [[ $# > 0 ]]
  do
    key="$1"

    case $key in
      -q|--quiet)
        quiet=YES
        ;;
      -t|--target)
        target_path="$2"
        shift
        ;;
      -h|--help)
        echo "Usage: collect [-q|--quiet] file [{-t|--target} target_path]"
        return # past argument
        ;;
      --default)
        DEFAULT=YES
        ;;
      *)
        file=$key # files
        ;;
    esac
    shift # past argument or value
  done
  path=`realpath "$file"`
  target_path=`realpath $target_path`
  filename=$(basename $path)
  if [[ -d $file ]]
  then
    srcdir=`realpath $file`
  else
    srcdir=`dirname $file/ | xargs realpath`
  fi
  if [[ $target_path == *"$srcdir"* ]]
  then
    echo "ERROR: Target path $target_path is in source path $srcdir"
    return
  fi

  if [ $QUIET == YES ]
  then
    options="-razq"
  else
    options="-razv"
  fi

  for node in $nodes
  do
    if [[ -d $target_path/$filename-$node ]]
    then
      rsync $options $node:$path/* $target_path/$filename-$node/ &
    else
      rsync $options $node:$path $target_path/$filename-$node &
    fi
  done
  wait
}
